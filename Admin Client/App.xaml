<Application x:Class="Admin_Client.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Admin_Client"
             StartupUri="\View\Windows\MainWindow.xaml">
    <Application.Resources>

        <!--#region Coloration-->

        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="LightSalmon"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="LightSalmon"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="DarkSalmon"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="DarkSalmon"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="DarkSalmon"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="DarkSalmon"/>

        <!--#endregion-->

        <!--#region Combobox-->

        <!--Combobox Rounded-->
        <Style x:Key="ComboboxButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border   
             Background="White"   
             x:Name="border"   
             CornerRadius="10,10,10,10"   
             BorderThickness="0,1,1,1"  
             BorderBrush="Gray">
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboboxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton Margin="0"  
               Height="{TemplateBinding Height}"  
               Style="{StaticResource ComboboxButtonStyle}"  
               Focusable="False"  
               IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  
               ClickMode="Press">
                                <Path  
                  HorizontalAlignment="Center"  
                  VerticalAlignment="Center"  
                  Data="M 0 0 L 4 4 L 8 0 Z"  
                  Fill="DodgerBlue" />
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite"  
               Content="{TemplateBinding SelectionBoxItem}"  
               ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"  
               ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"  
               VerticalAlignment="Center"  
               HorizontalAlignment="Left"  
               Margin="5,0,0,0"/>
                            <Popup Name="Popup"  
               Placement="Bottom"  
               IsOpen="{TemplateBinding IsDropDownOpen}"  
               AllowsTransparency="True"   
               Focusable="False"  
               PopupAnimation="Slide">
                                <Grid Name="DropDown"  
                 SnapsToDevicePixels="True"          
                 MinWidth="{TemplateBinding ActualWidth}"  
                 MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border   
                   x:Name="DropDownBorder"  
                   BorderThickness="1"  
                   CornerRadius="10"  
                   Background="White"
                   BorderBrush="Gray"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->

        <!--#region PasswordBox-->

        <!--PasswordBox Rounded Corners-->
        <Style TargetType="PasswordBox" x:Key="roundcornerpassword">
            <Setter Property="PasswordChar" Value="●"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="PasswordBox">
                        <Border CornerRadius="10" x:Name="Bd" Background="White" BorderBrush="Gray" BorderThickness="1" OpacityMask="{x:Null}">
                            <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->

        <!--#region TextBox-->

        <!--#endregion-->

        <!--#region Buttons-->

        <!--Button 5% round-->
        <ResourceDictionary x:Key="roundcornerbutton5">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
            <Style TargetType="Button">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid>
                                            <Border x:Name="background" Background="LightSalmon">
                                                <Border.Resources>
                                                    <Style TargetType="Border">
                                                        <Setter Property="CornerRadius" Value="5"/>
                                                    </Style>
                                                </Border.Resources>
                                            </Border>
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="background" Property="Opacity" Value="0.5"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>

        <!--Button 10% round Default Size-->
        <ResourceDictionary x:Key="roundcornerbutton10">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="10"/>
                <Setter Property="Height" Value="25"/>
            </Style>
            <Style TargetType="Button">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid>
                                            <Border x:Name="background" Background="LightSalmon">
                                                <Border.Resources>
                                                    <Style TargetType="Border">
                                                        <Setter Property="CornerRadius" Value="10"/>
                                                    </Style>
                                                </Border.Resources>
                                            </Border>
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="background" Property="Opacity" Value="0.5"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>

        <!--Button 100% round-->
        <ResourceDictionary x:Key="roundcornerbutton100">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="100"/>
            </Style>
            <Style TargetType="Button">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid>
                                            <Border x:Name="background" Background="LightSalmon">
                                                <Border.Resources>
                                                    <Style TargetType="Border">
                                                        <Setter Property="CornerRadius" Value="100"/>
                                                    </Style>
                                                </Border.Resources>
                                            </Border>
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="background" Property="Opacity" Value="0.5"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
        <!--#endregion-->

        <!--#region ButtonToIcons-->

        <!--Round Icon-->
        <ResourceDictionary x:Key="roundcornericon100">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="100"/>
            </Style>
            <Style TargetType="Button">
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="Focusable" Value="False"/>
            </Style>
        </ResourceDictionary>

        <!--#endregion-->

        <!--#region Borders-->

        <!--Border 5% round-->
        <ResourceDictionary x:Key="roundborder5">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
        </ResourceDictionary>

        <!--Border 10% round-->
        <ResourceDictionary x:Key="roundborder10">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="10"/>
            </Style>
        </ResourceDictionary>

        <!--Border 15% round-->
        <ResourceDictionary x:Key="roundborder15">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="15"/>
            </Style>
        </ResourceDictionary>

        <!--Border 25% round-->
        <ResourceDictionary x:Key="roundborder25">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="25"/>
            </Style>
        </ResourceDictionary>

        <!--Border 100% round-->
        <ResourceDictionary x:Key="roundborder100">
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="100"/>
            </Style>
        </ResourceDictionary>

        <!--#endregion-->

        <!--#region ListBox-->

        <!--ListBox rounded with empty check-->
        <Style TargetType="ListBox" x:Key="roundlistboxwithempty" BasedOn="{StaticResource {x:Type ListBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count}" Value="0">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Grid>
                                    <ListBox Resources="{StaticResource roundborder10}"/>
                                    <Label Content="Empty" FontSize="20" FontWeight="Bold" Foreground="LightGray" VerticalAlignment="Center" HorizontalAlignment="Center"></Label>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--#endregion-->

        <!--#region DataTemplates-->

        <!--DataTemplate User-->
        <DataTemplate x:Key="userDataTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.5*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="0.25*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="id" Content="{Binding fldUserID}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="email" Content="{Binding fldEmail}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="firstname" Content="{Binding fldFirstName}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="lastname" Content="{Binding fldLastName}" Grid.Column="3" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="phonenum" Content="{Binding fldPhonenumber}" Grid.Column="4" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="isadmin" Content="{Binding fldIsAdmin}" Grid.Column="5" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                </Grid>
            </Border>
        </DataTemplate>

        <!--DataTemplate userView-->
        <DataTemplate x:Key="userViewTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <StackPanel Orientation="Vertical">
                    <WrapPanel>
                        <TextBlock Text="First name: " Grid.Column="3"  VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="firstname" Text="{Binding fldFirstName}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                    <WrapPanel>
                        <TextBlock Text="Last name: " Grid.Column="3"  VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="lastname" Text="{Binding fldLastName}" Grid.Column="3" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                    <WrapPanel>
                        <TextBlock Text="ID: " Grid.Column="3"  VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="id" Text="{Binding fldUserID}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                    <WrapPanel>
                        <TextBlock Text="Email: " Grid.Column="3"  VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="email" Text="{Binding fldEmail}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                    <WrapPanel>
                        <TextBlock Text="Phone Number: " Grid.Column="3" VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="phonenum" Text="{Binding fldPhonenumber}" Grid.Column="4" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                </StackPanel>
            </Border>
        </DataTemplate>

        <!--DataTemplate tripList-->
        <DataTemplate x:Key="tripListTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <StackPanel Orientation="Vertical">
                    <WrapPanel>
                        <TextBlock Text="Trip: " Grid.Column="3"  VerticalAlignment="Center" FontWeight="Bold"/>
                        <TextBlock x:Name="tripID" Text="{Binding fldTripID}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></TextBlock>
                    </WrapPanel>
                </StackPanel>
            </Border>
        </DataTemplate>

        <!--DataTemplate Group-->
        <DataTemplate x:Key="groupDataTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.5*"/>
                        <ColumnDefinition Width="3*"/>
                        <ColumnDefinition Width="0.25*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="id" Content="{Binding fldGroupID}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="name" Content="{Binding fldGroupName}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="boolean" Content="{Binding fldIsTemporary}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                </Grid>
            </Border>
        </DataTemplate>

        <!--DataTemplate Log-->
        <DataTemplate x:Key="logDataTemplate">
            <Border Name="border" BorderThickness="3,0,3,0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="datetime" Content="{Binding DateTimeString}" Grid.Column="0" HorizontalAlignment="Center" ></Label>
                    <Label x:Name="logtype" Content="{Binding LogType}" Grid.Column="1" HorizontalAlignment="Left" ></Label>
                    <Label x:Name="logtext" Content="{Binding LogTxt}" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ></Label>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=LogType}">
                    <DataTrigger.Value>
                        <local:LogType>Success</local:LogType>
                    </DataTrigger.Value>
                    <Setter TargetName="border" Property="Background" Value="LightGreen" />
                    <Setter TargetName="border" Property="BorderBrush" Value="ForestGreen" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=LogType}">
                    <DataTrigger.Value>
                        <local:LogType>Information</local:LogType>
                    </DataTrigger.Value>
                    <Setter TargetName="border" Property="Background" Value="LightGray" />
                    <Setter TargetName="border" Property="BorderBrush" Value="Gray" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=LogType}">
                    <DataTrigger.Value>
                        <local:LogType>UserAction</local:LogType>
                    </DataTrigger.Value>
                    <Setter TargetName="border" Property="Background" Value="Pink" />
                    <Setter TargetName="border" Property="BorderBrush" Value="LightPink" />
                    <Setter TargetName="border" Property="BorderThickness" Value="3,3,3,0" />
                    <Setter TargetName="datetime" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtype" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtext" Property="FontWeight" Value="Bold" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=LogType}">
                    <DataTrigger.Value>
                        <local:LogType>Warning</local:LogType>
                    </DataTrigger.Value>
                    <Setter TargetName="border" Property="Background" Value="LightSalmon" />
                    <Setter TargetName="border" Property="BorderBrush" Value="Salmon" />
                    <Setter TargetName="border" Property="BorderThickness" Value="3,0,3,3" />
                    <Setter TargetName="datetime" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtype" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtext" Property="FontWeight" Value="Bold" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=LogType}">
                    <DataTrigger.Value>
                        <local:LogType>FatalError</local:LogType>
                    </DataTrigger.Value>
                    <Setter TargetName="border" Property="Background" Value="PaleVioletRed" />
                    <Setter TargetName="border" Property="BorderThickness" Value="3,3,3,3" />
                    <Setter TargetName="border" Property="BorderBrush" Value="Red" />
                    <Setter TargetName="datetime" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtype" Property="FontWeight" Value="Bold" />
                    <Setter TargetName="logtext" Property="FontWeight" Value="Bold" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--DataTemplate Parameter-->
        <DataTemplate x:Key="parameterDataTemplate">
            <Border Name="border" BorderThickness="0,3,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="125"/>
                        <ColumnDefinition Width="75"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="name" Content="{Binding ParameterName}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="type" Content="{Binding ParameterType}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <TextBox x:Name="valuetextbox" Text="{Binding ParameterValue}" Grid.Column="2" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Resources="{StaticResource roundborder10}" ></TextBox>
                    <ComboBox x:Name="valuecombobox" Text="{Binding ParameterValue}" Grid.Column="2" Margin="2" Background="White" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Visibility="Hidden" Style="{StaticResource ComboboxStyle}" >
                        <ComboBoxItem Content="True" Resources="{StaticResource roundborder10}"/>
                        <ComboBoxItem Content="False" Resources="{StaticResource roundborder10}"/>
                    </ComboBox>
                </Grid>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsValid}" Value="false">
                    <Setter TargetName="border" Property="Background" Value="PaleVioletRed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ParameterType}" Value="Boolean">
                    <Setter TargetName="valuecombobox" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ParameterValue}" Value="True">
                    <Setter TargetName="valuecombobox" Property="SelectedIndex" Value="0"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ParameterValue}" Value="False">
                    <Setter TargetName="valuecombobox" Property="SelectedIndex" Value="1"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--DataTemplate Receipt-->
        <DataTemplate x:Key="receiptDataTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="id" Content="{Binding Id}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="name" Content="{Binding Name}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="groupname" Content="{Binding GroupName}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="projectedvalue" Content="{Binding ProjectedValue}" Grid.Column="3" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="amountpaid" Content="{Binding AmountPaid}" Grid.Column="4" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                </Grid>
            </Border>
        </DataTemplate>

        <!--DataTemplate UserExpense-->
        <DataTemplate x:Key="userExpenseDataTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="id" Content="{Binding Id}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="name" Content="{Binding Name}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="groupname" Content="{Binding Amount}" Grid.Column="2" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="projectedvalue" Content="{Binding Date}" Grid.Column="3" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                </Grid>
            </Border>
        </DataTemplate>

        <!--DataTemplate LogFile-->
        <DataTemplate x:Key="logFileDataTemplate">
            <Border Name="border" BorderThickness="0,0,0,0" BorderBrush="Gray" Resources="{StaticResource roundborder10}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Label x:Name="id" Content="{Binding Id}" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                    <Label x:Name="date" Content="{Binding Date}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" ></Label>
                </Grid>
            </Border>
        </DataTemplate>

        <!--#endregion-->

        <!--#region ContextMenu-->

        <!--ContextMenu rounded-->
        <Style TargetType="ContextMenu" x:Key="roundcontextmenu">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border CornerRadius="12" BorderBrush="Gray" BorderThickness="1" Background="White" SnapsToDevicePixels="True">
                            <ItemsPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->

        <!--#region ItemContainerStyle-->

        <!--List item-->
        <Style x:Key="RoundedListItem" TargetType="{x:Type ListBoxItem}" Resources="{StaticResource roundborder10}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--List item witout focusable-->
        <Style x:Key="NoTargetRoundedListItem" TargetType="{x:Type ListBoxItem}" Resources="{StaticResource roundborder10}">
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--List item witout focusable and hover-->
        <Style x:Key="NoHoverOrTargetRoundedListItem" TargetType="{x:Type ListBoxItem}" Resources="{StaticResource roundborder10}">
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsHitTestVisible" Value="false"/>
        </Style>

        <!--#endregion-->

    </Application.Resources>
</Application>
